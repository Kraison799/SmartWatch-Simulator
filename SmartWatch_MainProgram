"""
Instituto Tecnológico de Costa Rica
Escuela de Ingeniería en Computadores

II Semestre 2017 - Taller de Programación
Prof. Jeff Schmidt Peralta
I Proyecto - SmartWatch

Víctor Ignacio Castrillo Muñoz
Carnet: 2017110244

Lenguaje de Programación: Python 3.4.2
Interfaz: Tkinter 8.6.1
"""

### Libraries ###
from tkinter import *
from threading import Thread
import os, time, random, Contacts, Calendar, Clock

### Load Images ###
# function used to get images path
def LoadImg(img_name):
    img_path = os.path.join("imgs", img_name)
    image = PhotoImage(file=img_path)
    return image

### Constants ###
# colors used in the program
White = "#FAFAFA"
Black = "#000000"
Light_Blue = "#81BEF7"
Orange = "#FAAC58"
Dark_Blue = "#084B8A"
Light_Green = "#9AFE2E"
Light_Red = "#FE2E2E"
Purple = "#642EFE"

Colors = [Light_Blue, Orange, Dark_Blue, Light_Green, Purple]

### Clock ###
clock = Clock.Watch(time.localtime())

### Flags ###
# for determinating current screen
on_flag = False
start_flag = False
mm_flag = False
contacts_flag = False
contact_flag = False
new_contact_flag = False
calendar_flag = False
game_flag = False

# for control of the threads
thread_1_flag = False
thread_2_flag = False

# language and password
english = False # True: english / False: spanish
password = "7052" # pin code

### Main Window ###
# main window of the program that shows the watch with its screen
def Main_Window():
    global on_flag, start_flag, mm_flag, contacts_flag, clock, thread_1_flag, thread_2_flag, pin_attempts, start_screen, main_menu, contacts_screen, english
    # basic definitions of the main window (size, name, canvas)
    main_window = Tk()
    main_window.title("SmartWatch")
    main_window.minsize(400, 400)
    main_window.resizable(width=False, height=False)

    main_canvas = Canvas(main_window, width=396, height=396, bg=White)
    main_canvas.place(x=0, y=0)

    # background image
    watch_img = LoadImg("Watch.gif")
    background = Label(main_canvas, image=watch_img, bg=White)
    background.place(x=0, y=0)

    # turned off screen
    black_canvas = Canvas(main_window, width=245, height=172, bg=Black)
    black_canvas.place(x=71, y=116)

    # function for the block screen (empty)
    def Block_Screen():
        global block_flag
        block_screen = Canvas(main_window, width=245, height=172, bg=Purple)
        block_screen.place(x=71, y=116)

        main_window.mainloop()

    # function for the contacts screen
    def Contacts_Screen():
        global mm_flag, contacts_flag, contacts_screen, thread_1_flag, thread_2_flag, english, index_contact, index_screen
        if contacts_flag:
            # definition of the contacts screen
            contacts_screen = Canvas(main_window, width=245, height=172, bg=White)
            contacts_screen.place(x=71, y=116)

            if english:
                ID_info = Label(contacts_screen, text="ID", font=("Haettenschweiler", 15), bg=White, fg=Dark_Blue)
                name_info = Label(contacts_screen, text="Name", font=("Haettenschweiler", 15), bg=White, fg=Dark_Blue)
            if not english:
                ID_info = Label(contacts_screen, text="ID", font=("Haettenschweiler", 15), bg=White, fg=Dark_Blue)
                name_info = Label(contacts_screen, text="Nombre", font=("Haettenschweiler", 15), bg=White, fg=Dark_Blue)
            ID_info.place(x=20, y=5)
            name_info.place(x=50, y=5)

            contacts = Contacts.Contact_List
            index_screen = 1

            def Print_Label():
                global label_list, index_screen, index_contact
                label_list = []
                index_contact = 0
                for contact in contacts.__contact_list__(contacts):
                    if (index_screen-1)*6 <= index_contact < index_screen*6:
                        ID_label = Label(contacts_screen, text=contact.ID, font=("Haettenschweiler", 13), bg=White, fg=Light_Blue)
                        name_label = Label(contacts_screen, text=contact.name, font=("Haettenschweiler", 13), bg=White, fg=Light_Blue)
                        ID_label.place(x=20, y=35+21*(index_contact-(index_screen-1)*6))
                        name_label.place(x=50, y=35+21*(index_contact-(index_screen-1)*6))
                        label_list.append(ID_label)
                        label_list.append(name_label)
                    index_contact += 1

            Print_Label()

            def Previous():
                global label_list, index_screen, index_contact
                if 0 < index_screen - 1:
                    for x in label_list:
                        x.destroy()
                    label_list = []
                    index_screen -= 1
                    Print_Label()

            def Next():
                global label_list, index_screen, index_contact
                if index_screen + 1 < index_contact/6 + 0.99:
                    for x in label_list:
                        x.destroy()
                    label_list = []
                    index_screen += 1
                    Print_Label()

            previous_img = LoadImg("Left_Arrow_Icon.gif")
            previous_button = Button(contacts_screen, image=previous_img, command=Previous, width=20, height=20, bg=Light_Blue)
            previous_button.place(x=130, y=105)
            next_img = LoadImg("Right_Arrow_Icon.gif")
            next_button = Button(contacts_screen, image=next_img, command=Next, width=20, height=20, bg=Light_Blue)
            next_button.place(x=130, y=130)

            def To_Main_Menu():
                global mm_flag, contacts_flag, thread_1_flag, thread_2_flag
                mm_flag = True
                contacts_flag = False
                thread_1_flag = True
                thread_2_flag = True
                contacts_screen.destroy()
                Main_Menu()

            if english:
                searching_info = Label(contacts_screen, text="Search", font=("Haettenschweiler", 15), bg=White, fg=Dark_Blue)
            if not english:
                searching_info = Label(contacts_screen, text="Buscar", font=("Haettenschweiler", 15), bg=White, fg=Dark_Blue)
            searching_info.place(x=165, y=5)
            searching_entry = Entry(contacts_screen, width=8, bg=White)
            searching_entry.place(x=165, y=50)
 
            def Show_Contact():
                global contact_flag, contact_info
                contact_flag = True
                contact_info = Canvas(main_window, width=245, height=172, bg=White)
                contact_info.place(x=71, y=116)

                try:
                    if searching_entry.get() != "":
                        showing_data = contacts.__search__(contacts, searching_entry.get())

                        color = random.choice(Colors)

                        name = Label(contact_info, text=showing_data.name, font=("Haettenschweiler", 20), bg=White, fg=color)
                        name.place(x=75,y=8.5)
                        if showing_data.cellphone != "":
                            cellphone = Label(contact_info, text=showing_data.cellphone, font=("Haettenschweiler", 17), bg=White, fg=color)
                            cellphone.place(x=75, y=40)
                            if showing_data.phone != "":
                                phone = Label(contact_info, text=showing_data.phone, font=("Haettenschweiler", 17), bg=White, fg=color)
                                phone.place(x=160, y=40)
                        if showing_data.cellphone == "" and showing_data.phone != "":
                            phone = Label(contact_info, text=showing_data.phone, font=("Haettenschweiler", 17), bg=White, fg=color)
                            phone.place(x=75, y=40)
                        if showing_data.pic == "":
                            profile_icon = LoadImg("Profile_Icon.gif")
                            profile_pic = Label(contact_info, image=profile_icon, bg=color)
                            profile_pic.place(x=10, y=10)
                        if showing_data.pic != "":
                            photo = LoadImg(showing_data.pic)
                            photo_label = Label(contact_info, image=photo, bg=White)
                            photo_label.place(x=10, y=10)
                        if showing_data.e_mail != "":
                            e_mail = Label(contact_info, text=showing_data.e_mail, font=("Haettenschweiler", 17), bg=White, fg=color)
                            e_mail.place(x=10, y=77.5)

                        if english:
                            new_label = Label(contact_info, text="New", font=("Haettenschweiler", 17), bg=White, fg=color)
                            data_label = Label(contact_info, text="Change", font=("Haettenschweiler", 17), bg=White, fg=color)
                        if not english:
                            new_label = Label(contact_info, text="Nuevo", font=("Haettenschweiler", 17), bg=White, fg=color)
                            data_label = Label(contact_info, text="Cambiar", font=("Haettenschweiler", 17), bg=White, fg=color)
                        new_label.place(x=2.5, y=146)
                        new_info = Entry(contact_info, width=6, bg=White)
                        new_info.place(x=51.5, y=152.5)
                        data_label.place(x=100, y=146)
                        data_info = Entry(contact_info, width=6, bg=White)
                        data_info.place(x=161.5, y=152.5)

                        contacts_screen.destroy()

                        def Edit():
                            if english:
                                if data_info.get() == "Name":
                                    contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                    contacts.__create__(contacts, new_info.get(), showing_data.phone, showing_data.cellphone, showing_data.e_mail, showing_data.pic)
                                if data_info.get() == "Phone":
                                    contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                    contacts.__create__(contacts, showing_data.name, new_info.get(), showing_data.cellphone, showing_data.e_mail, showing_data.pic)
                                if data_info.get() == "Cellphone":
                                    contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                    contacts.__create__(contacts, showing_data.name, showing_data.phone, new_info.get(), showing_data.e_mail, showing_data.pic)
                                if data_info.get() == "E-mail":
                                    contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                    contacts.__create__(contacts, showing_data.name, showing_data.phone, showing_data.cellphone, new_info.get(), showing_data.pic)
                                if data_info.get() == "Picture":
                                    try:
                                        contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                        contacts.__create__(contacts, showing_data.name, showing_data.phone, showing_data.cellphone, showing_data.e_mail, new_info.get())
                                    except:
                                        print("Error: Image not found")
                            if not english:
                                if data_info.get() == "Nombre":
                                    contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                    contacts.__create__(contacts, new_info.get(), showing_data.phone, showing_data.cellphone, showing_data.e_mail, showing_data.pic)
                                if data_info.get() == "Teléfono":
                                    contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                    contacts.__create__(contacts, showing_data.name, new_info.get(), showing_data.cellphone, showing_data.e_mail, showing_data.pic)
                                if data_info.get() == "Célular":
                                    contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                    contacts.__create__(contacts, showing_data.name, showing_data.phone, new_info.get(), showing_data.e_mail, showing_data.pic)
                                if data_info.get() == "Correo":
                                    contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                    contacts.__create__(contacts, showing_data.name, showing_data.phone, showing_data.cellphone, new_info.get(), showing_data.pic)
                                if data_info.get() == "Foto":
                                    try:
                                        contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                                        contacts.__create__(contacts, showing_data.name, showing_data.phone, showing_data.cellphone, showing_data.e_mail, new_info.get())
                                    except:
                                        print("Error: Imagen no encontrada")

                        def Delete():
                            contacts.__delete__(contacts, contacts.__contact_list__(contacts), showing_data.ID)
                            Destroy_Screen()

                        edit_icon = LoadImg("Edit_Icon.gif")
                        edit_button = Button(contact_info, image=edit_icon, command=Edit, width=20, height=20, bg=color)
                        edit_button.place(x=2.5, y=120)

                        delete_icon = LoadImg("Erase_Icon.gif")
                        delete_button = Button(contact_info, image=delete_icon, command=Delete, width=20, height=20, bg=color)
                        delete_button.place(x=221, y=120)

                    def Destroy_Screen():
                        global contact_flag
                        contact_flag = False
                        contact_info.destroy()
                        Contacts_Screen()

                    back_button = Button(contact_info, image=return_img, command=Destroy_Screen, width=20, height=20, bg=Light_Red)
                    back_button.place(x=221, y=147.5)

                    main_window.mainloop()

                except:
                    contact_info.destroy()

            def Create_Contact():
                global new_contact_flag, new_contact
                new_contact_flag = True
                new_contact = Canvas(main_window, width=245, height=172, bg=White)
                new_contact.place(x=71, y=116)

                if english:
                    name_label = Label(new_contact, text="Name", font=("Haettenschweiler", 14), bg=White)
                    phone_label = Label(new_contact, text="Phone", font=("Haettenschweiler", 14), bg=White)
                    cellphone_label = Label(new_contact, text="Cellphone", font=("Haettenschweiler", 14), bg=White)
                    e_mail_label = Label(new_contact, text="E-mail", font=("Haettenschweiler", 14), bg=White)
                    pic_label = Label(new_contact, text="Picture", font=("Haettenschweiler", 14), bg=White)
                    name_label.place(x=16, y=49)
                    phone_label.place(x=14, y=74)
                    cellphone_label.place(x=5, y=99)
                    e_mail_label.place(x=14.5, y=124)
                    pic_label.place(x=9, y=149)
                if not english:
                    name_label = Label(new_contact, text="Nombre", font=("Haettenschweiler", 14), bg=White)
                    phone_label = Label(new_contact, text="Teléfono", font=("Haettenschweiler", 14), bg=White)
                    cellphone_label = Label(new_contact, text="Célular", font=("Haettenschweiler", 14), bg=White)
                    e_mail_label = Label(new_contact, text="Correo", font=("Haettenschweiler", 14), bg=White)
                    pic_label = Label(new_contact, text="Foto", font=("Haettenschweiler", 14), bg=White)
                    name_label.place(x=6.5, y=49)
                    phone_label.place(x=5, y=74)
                    cellphone_label.place(x=11, y=99)
                    e_mail_label.place(x=9.5, y=124)
                    pic_label.place(x=15.5, y=149)

                name_entry = Entry(new_contact, width=8, bg=White)
                name_entry.place(x=67, y=52)
                phone_entry = Entry(new_contact, width=8, bg=White)
                phone_entry.place(x=67, y=77)
                cellphone_entry = Entry(new_contact, width=8, bg=White)
                cellphone_entry.place(x=67, y=102)
                e_mail_entry = Entry(new_contact, width=8, bg=White)
                e_mail_entry.place(x=67, y=127)
                pic_entry = Entry(new_contact, width=8, bg=White)
                pic_entry.place(x=67, y=152)

                def Create():
                    global english
                    if  name_entry.get() != "" and (phone_entry.get() != "" or cellphone_entry.get() != "" or e_mail_entry.get() != ""):
                        try:
                            if pic_entry.get() != "":
                                LoadImg(pic_entry.get())
                            contacts.__create__(contacts, name_entry.get(), phone_entry.get(), cellphone_entry.get(), e_mail_entry.get(), pic_entry.get())
                        except:
                            if english:
                                print("Error: Image not found")
                            if not english:
                                print("Error: Imagen no encontrada")

                def Cancel_Create():
                    global new_contact_flag
                    new_contact_flag = False
                    new_contact.destroy()
                    Contacts_Screen()

                if english:
                    create_button = Button(new_contact, text="Create", font=("Haettenschweiler", 14), command=Create, bg=Light_Green)
                if not english:
                    create_button = Button(new_contact, text="Crear", font=("Haettenschweiler", 14), command=Create, bg=Light_Green)
                create_button.place(x=160, y=100)

                back_button = Button(new_contact, image=return_img, command=Cancel_Create, width=20, height=20, bg=Light_Red)
                back_button.place(x=221, y=147.5)

                main_window.mainloop()

            new_icon = LoadImg("New_Icon.gif")
            create_button = Button(contacts_screen, image=new_icon, command=Create_Contact, width=20, height=20, bg=Orange)
            create_button.place(x=177, y=120)

            search_img = LoadImg("Search_Icon.gif")
            searching_ID_button = Button(contacts_screen, image=search_img, command=Show_Contact, width=25, height=25, bg=Light_Blue)
            searching_ID_button.place(x=174.5, y=70)

            return_img = LoadImg("Return_Icon.gif")
            return_button = Button(contacts_screen, image=return_img, command=To_Main_Menu, width=20, height=20, bg=Light_Red)
            return_button.place(x=221, y=3)

            main_window.mainloop()

    def Calendar_Screen():
        global mm_flag, calendar_flag, calendar_screen, thread_1_flag, thread_2_flag, english
        if calendar_flag:
            calendar_screen = Canvas(main_window, width=245, height=172, bg=White)
            calendar_screen.place(x=71, y=116)

            def To_Main_Menu():
                global mm_flag, calendar_flag, thread_1_flag, thread_2_flag
                mm_flag = True
                calendar_flag = False
                thread_1_flag = True
                thread_2_flag = True
                calendar_screen.destroy()
                Main_Menu()

            return_img = LoadImg("Return_Icon.gif")
            return_button = Button(calendar_screen, image=return_img, command=To_Main_Menu, width=20, height=20, bg=Light_Red)
            return_button.place(x=221, y=3)

            main_window.mainloop()

    def Game_Screen():
        global mm_flag, game_flag, game_screen, thread_1_flag, thread_2_flag, english
        if game_flag:
            game_screen = Canvas(main_window, width=245, height=172, bg=White)
            game_screen.place(x=71, y=116)

            def To_Main_Menu():
                global mm_flag, game_flag, thread_1_flag, thread_2_flag
                mm_flag = True
                game_flag = False
                thread_1_flag = True
                thread_2_flag = True
                game_screen.destroy()
                Main_Menu()

            return_img = LoadImg("Return_Icon.gif")
            return_button = Button(game_screen, image=return_img, command=To_Main_Menu, width=20, height=20, bg=Light_Red)
            return_button.place(x=221, y=3)

            main_window.mainloop()

    def Main_Menu():
        global start_flag, mm_flag, contacts_flag, clock, thread_1_flag, thread_2_flag, main_menu, english
        def Clock_Thread():
            global thread_2_flag
            while thread_2_flag:
                clock.__time__()
                time.sleep(1)
        clock_thread = Thread(target=Clock_Thread)
        clock_thread.start()

        if mm_flag:
            main_menu = Canvas(main_window, width=245, height=172, bg=White)
            main_menu.place(x=71, y=116)

            def Clock_Label():
                global thread_1_flag
                while thread_1_flag:
                    hour = ""
                    if len(str(clock.hour)) == 2:
                        hour += str(clock.hour)
                    if len(str(clock.hour)) == 1:
                        hour += "0" + str(clock.hour)
                    if len(str(clock.minute)) == 2:
                        hour += ":" + str(clock.minute)
                    if len(str(clock.minute)) == 1:
                        hour += ":0" + str(clock.minute)
                    if len(str(clock.second)) == 2:
                        hour += ":" +str(clock.second)
                    if len(str(clock.second)) == 1:
                        hour += ":0" + str(clock.second)
                    clock_label = Label(main_menu, text=hour, font=("Haettenschweiler", 25), bg=White, fg=Dark_Blue)
                    clock_label.place(x=20, y=10)
                    time.sleep(1)
                    clock_label.destroy()

            hour_thread = Thread(target=Clock_Label)
            hour_thread.start()

            def To_Contacts():
                global mm_flag, contacts_flag, thread_1_flag, thread_2_flag
                mm_flag = False
                contacts_flag = True
                thread_1_flag = False
                thread_2_flag = False
                main_menu.destroy()
                Contacts_Screen()

            def To_Calendar():
                global mm_flag, calendar_flag, thread_1_flag, thread_2_flag
                mm_flag = False
                calendar_flag = True
                thread_1_flag = False
                thread_2_flag = False
                main_menu.destroy()
                Calendar_Screen()

            def To_Game():
                global mm_flag, game_flag, thread_1_flag, thread_2_flag
                mm_flag = False
                game_flag = True
                thread_1_flag = False
                thread_2_flag = False
                main_menu.destroy()
                Game_Screen()

            contacts_icon = LoadImg("Contacts_Icon.gif")
            contacts_button = Button(main_menu, image=contacts_icon, width=25, height=25, command=To_Contacts, bg=Light_Blue)
            contacts_button.place(x=195, y=120)

            calendar_icon = LoadImg("Calendar_Icon.gif")
            calendar_button = Button(main_menu, image=calendar_icon, width=25, height=25, command=To_Calendar, bg=Orange)
            calendar_button.place(x=80, y=120)

            game_icon = LoadImg("Game_Icon.gif")
            game_button = Button(main_menu, image=game_icon, width=25, height=25, command=To_Game, bg=Purple)
            game_button.place(x=21.5, y=120)

            main_menu.mainloop()

    def Start_Screen():
        global on_flag, start_flag, mm_flag, thread_1_flag, thread_2_flag, start_screen, pin_attempts, english
        if start_flag:
            start_screen = Canvas(main_window, width=245, height=172, bg=White)
            start_screen.place(x=71, y=116)

            iTEC_img = LoadImg("iTEC.gif")
            iTEC = Label(start_screen, image=iTEC_img, bg=White)
            iTEC.place(x=48.5, y=83)
            logo_img = LoadImg("Logo.gif")
            logo = Label(start_screen, image=logo_img, bg=White)
            logo.place(x=90, y=20)

            def Get_PIN():
                global on_flag, start_flag, mm_flag, pin_attempts
                pin_label = Label(start_screen, text="PIN", font=("Haettenschweiler", 15), bg=White)
                pin_label.place(x=17, y=4)
                pin_entry = Entry(start_screen, width=5, bg="#FAFAFA")
                pin_entry.place(x=50, y=10)

                def Enter():
                    global on_flag, start_flag, mm_flag, thread_1_flag, thread_2_flag, pin_attempts, attempts_label
                    if pin_entry.get() == password:
                        start_screen.destroy()
                        start_flag = False
                        mm_flag = True
                        thread_1_flag = True
                        thread_2_flag = True
                        Main_Menu()
                    if pin_entry.get() != password and pin_attempts != 0:
                        if english:
                            if pin_attempts != 3:
                                attempts_label.destroy()
                            pin_attempts -= 1
                            attempts_label = Label(start_screen, text=("Attempts left: " + str(pin_attempts)), font=("Haettenschweiler", 11), bg=White, fg=Light_Red)
                            attempts_label.place(x=110, y=6)
                        if not english:
                            if pin_attempts != 3:
                                attempts_label.destroy()
                            pin_attempts -= 1
                            attempts_label = Label(start_screen, text=("Intentos restantes: " + str(pin_attempts)), font=("Haettenschweiler", 11), bg=White, fg=Light_Red)
                            attempts_label.place(x=110, y=6)
                    if pin_entry.get() != password and pin_attempts == 0:
                        start_flag = False
                        on_flag = False
                        start_screen.destroy()

                def Cancel():
                    pin_label.destroy()
                    pin_entry.destroy()
                    pin_off.destroy()
                    if pin_attempts != 3:
                        attempts_label.destroy()
                    enter = Button(start_screen, image=enter_img, command=Get_PIN, width=20, height=20, bg=Light_Blue)
                    enter.place(x=221, y=3)

                    start_screen.mainloop()

                return_img = LoadImg("Return_Icon.gif")
                pin_off = Button(start_screen, image=return_img, command=Cancel, width=20, height=20, bg=Light_Red)
                pin_off.place(x=221, y=43)
                        
                enter_img = LoadImg("Enter_Icon.gif")
                enter = Button(start_screen, image=enter_img, command=Enter, width=20, height=20, bg=Light_Blue)
                enter.place(x=221, y=3)

                start_screen.mainloop()

            enter_img = LoadImg("Enter_Icon.gif")
            enter = Button(start_screen, image=enter_img, command=Get_PIN, width=20, height=20, bg=Light_Blue)
            enter.place(x=221, y=3)

            start_screen.mainloop()

    # function that check every flag to destroy the current screen or create a new one and create the start screen
    def Turn_():
        global on_flag, start_flag, mm_flag, contacts_flag, contact_flag, new_contact_flag, calendar_flag, game_flag, thread_1_flag, thread_2_flag, pin_attempts, start_screen, main_menu, contacts_screen, contact_info, calendar_screen, game_screen, english
        if not on_flag:
            on_flag = True
            start_flag = True
            pin_attempts = 3
            Start_Screen()
        if on_flag:
            on_flag = False
            if start_flag:
                start_flag = False
                start_screen.destroy()
            if mm_flag:
                mm_flag = False
                main_menu.destroy()
            if contacts_flag:
                contacts_flag = False
                contacts_screen.destroy()
            if contact_flag:
                contact_flag = False
                contact_info.destroy()
            if new_contact_flag:
                new_contact_flag = False
                new_contact.destroy()
            if calendar_flag:
                calendar_flag = False
                calendar_screen.destroy()
            if game_flag:
                game_flag = False
                game_screen.destroy()
            thread_1_flag = False
            thread_2_flag = False

    # button to turn on/off the watch
    on_off_img = LoadImg("On_Off.gif")
    on_off_button = Button(main_canvas, image=on_off_img, command=Turn_, width=30, height=30, bg="#FAFAFA")
    on_off_button.place(x=366, y=366)

    main_window.mainloop()

Main_Window()
